* 
* ==> Audit <==
* |-----------|-----------------------|----------|-------|---------|---------------------|---------------------|
|  Command  |         Args          | Profile  | User  | Version |     Start Time      |      End Time       |
|-----------|-----------------------|----------|-------|---------|---------------------|---------------------|
| start     |                       | minikube | fazil | v1.29.0 | 27 Mar 23 17:18 IST |                     |
| start     |                       | minikube | fazil | v1.29.0 | 27 Mar 23 18:40 IST |                     |
| start     |                       | minikube | fazil | v1.29.0 | 27 Mar 23 18:47 IST | 27 Mar 23 18:52 IST |
| start     |                       | minikube | fazil | v1.29.0 | 28 Mar 23 14:14 IST | 28 Mar 23 14:14 IST |
| service   | mongo-express-service | minikube | fazil | v1.29.0 | 28 Mar 23 17:19 IST | 28 Mar 23 17:19 IST |
| service   | mongo-express-service | minikube | fazil | v1.29.0 | 28 Mar 23 17:22 IST | 28 Mar 23 17:22 IST |
| addons    | enable ingress        | minikube | fazil | v1.29.0 | 28 Mar 23 19:30 IST | 28 Mar 23 19:31 IST |
| dashboard |                       | minikube | fazil | v1.29.0 | 28 Mar 23 20:59 IST |                     |
| start     |                       | minikube | fazil | v1.29.0 | 29 Mar 23 11:20 IST | 29 Mar 23 11:20 IST |
| dashboard |                       | minikube | fazil | v1.29.0 | 29 Mar 23 11:25 IST |                     |
| start     |                       | minikube | fazil | v1.29.0 | 29 Mar 23 11:44 IST | 29 Mar 23 11:45 IST |
| dashboard |                       | minikube | fazil | v1.29.0 | 29 Mar 23 11:46 IST |                     |
| dashboard |                       | minikube | fazil | v1.29.0 | 29 Mar 23 11:47 IST |                     |
| ip        |                       | minikube | fazil | v1.29.0 | 29 Mar 23 15:52 IST | 29 Mar 23 15:52 IST |
| start     |                       | minikube | fazil | v1.29.0 | 30 Mar 23 13:44 IST | 30 Mar 23 13:45 IST |
| delete    |                       | minikube | fazil | v1.29.0 | 30 Mar 23 13:52 IST | 30 Mar 23 13:52 IST |
| start     |                       | minikube | fazil | v1.29.0 | 30 Mar 23 13:52 IST | 30 Mar 23 13:52 IST |
| stop      |                       | minikube | fazil | v1.29.0 | 30 Mar 23 14:39 IST |                     |
| stop      |                       | minikube | fazil | v1.29.0 | 30 Mar 23 14:39 IST |                     |
| stop      |                       | minikube | fazil | v1.29.0 | 30 Mar 23 14:40 IST |                     |
|-----------|-----------------------|----------|-------|---------|---------------------|---------------------|

* 
* ==> Last Start <==
* Log file created at: 2023/03/30 13:52:09
Running on machine: pop-os
Binary: Built with gc go1.19.5 for linux/amd64
Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu threadid file:line] msg
I0330 13:52:09.300968   54684 out.go:296] Setting OutFile to fd 1 ...
I0330 13:52:09.301448   54684 out.go:348] isatty.IsTerminal(1) = true
I0330 13:52:09.301462   54684 out.go:309] Setting ErrFile to fd 2...
I0330 13:52:09.301471   54684 out.go:348] isatty.IsTerminal(2) = true
I0330 13:52:09.301631   54684 root.go:334] Updating PATH: /home/fazil/.minikube/bin
I0330 13:52:09.301971   54684 out.go:303] Setting JSON to false
I0330 13:52:09.304088   54684 start.go:125] hostinfo: {"hostname":"pop-os","uptime":15937,"bootTime":1680148593,"procs":424,"os":"linux","platform":"debian","platformFamily":"debian","platformVersion":"bookworm/sid","kernelVersion":"6.2.6-76060206-generic","kernelArch":"x86_64","virtualizationSystem":"kvm","virtualizationRole":"host","hostId":"4fb9b3e4-2598-ea40-3c32-e02763eb9114"}
I0330 13:52:09.304175   54684 start.go:135] virtualization: kvm host
I0330 13:52:09.306201   54684 out.go:177] 😄  minikube v1.29.0 on Debian bookworm/sid
I0330 13:52:09.308613   54684 notify.go:220] Checking for updates...
I0330 13:52:09.308632   54684 driver.go:365] Setting default libvirt URI to qemu:///system
I0330 13:52:09.308649   54684 global.go:111] Querying for installed drivers using PATH=/home/fazil/.minikube/bin:/home/fazil/.krew/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin:/usr/local/go/bin
I0330 13:52:09.309399   54684 global.go:122] qemu2 default: true priority: 7, state: {Installed:true Healthy:true Running:true NeedsImprovement:false Error:<nil> Reason: Fix: Doc: Version:}
I0330 13:52:09.309430   54684 global.go:122] ssh default: false priority: 4, state: {Installed:true Healthy:true Running:false NeedsImprovement:false Error:<nil> Reason: Fix: Doc: Version:}
I0330 13:52:09.364714   54684 virtualbox.go:136] virtual box version: 6.1.36_Ubuntur152435
I0330 13:52:09.364774   54684 global.go:122] virtualbox default: true priority: 6, state: {Installed:true Healthy:true Running:false NeedsImprovement:false Error:<nil> Reason: Fix: Doc: Version:6.1.36_Ubuntur152435
}
I0330 13:52:09.365077   54684 global.go:122] vmware default: true priority: 7, state: {Installed:false Healthy:false Running:false NeedsImprovement:false Error:exec: "docker-machine-driver-vmware": executable file not found in $PATH Reason: Fix:Install docker-machine-driver-vmware Doc:https://minikube.sigs.k8s.io/docs/reference/drivers/vmware/ Version:}
I0330 13:52:09.489086   54684 docker.go:141] docker version: linux-23.0.1:Docker Engine - Community
I0330 13:52:09.489177   54684 cli_runner.go:164] Run: docker system info --format "{{json .}}"
I0330 13:52:09.750777   54684 info.go:266] docker info: {ID:642e1ccf-744a-4421-948e-db1c6cf1d758 Containers:0 ContainersRunning:0 ContainersPaused:0 ContainersStopped:0 Images:4 Driver:overlay2 DriverStatus:[[Backing Filesystem extfs] [Supports d_type true] [Using metacopy false] [Native Overlay Diff true] [userxattr false]] SystemStatus:<nil> Plugins:{Volume:[local] Network:[bridge host ipvlan macvlan null overlay] Authorization:<nil> Log:[awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog]} MemoryLimit:true SwapLimit:true KernelMemory:false KernelMemoryTCP:false CPUCfsPeriod:true CPUCfsQuota:true CPUShares:true CPUSet:true PidsLimit:true IPv4Forwarding:true BridgeNfIptables:true BridgeNfIP6Tables:true Debug:false NFd:22 OomKillDisable:false NGoroutines:32 SystemTime:2023-03-30 13:52:09.729440966 +0530 IST LoggingDriver:json-file CgroupDriver:systemd NEventsListener:0 KernelVersion:6.2.6-76060206-generic OperatingSystem:Pop!_OS 22.04 LTS OSType:linux Architecture:x86_64 IndexServerAddress:https://index.docker.io/v1/ RegistryConfig:{AllowNondistributableArtifactsCIDRs:[] AllowNondistributableArtifactsHostnames:[] InsecureRegistryCIDRs:[127.0.0.0/8] IndexConfigs:{DockerIo:{Name:docker.io Mirrors:[] Secure:true Official:true}} Mirrors:[]} NCPU:8 MemTotal:8146669568 GenericResources:<nil> DockerRootDir:/var/lib/docker HTTPProxy: HTTPSProxy: NoProxy: Name:pop-os Labels:[] ExperimentalBuild:false ServerVersion:23.0.1 ClusterStore: ClusterAdvertise: Runtimes:{Runc:{Path:runc}} DefaultRuntime:runc Swarm:{NodeID: NodeAddr: LocalNodeState:inactive ControlAvailable:false Error: RemoteManagers:<nil>} LiveRestoreEnabled:false Isolation: InitBinary:docker-init ContainerdCommit:{ID:2456e983eb9e37e47538f59ea18f2043c9a73640 Expected:2456e983eb9e37e47538f59ea18f2043c9a73640} RuncCommit:{ID:v1.1.4-0-g5fd4c4d Expected:v1.1.4-0-g5fd4c4d} InitCommit:{ID:de40ad0 Expected:de40ad0} SecurityOptions:[name=apparmor name=seccomp,profile=builtin name=cgroupns] ProductLicense: Warnings:<nil> ServerErrors:[] ClientInfo:{Debug:false Plugins:[map[Name:buildx Path:/usr/libexec/docker/cli-plugins/docker-buildx SchemaVersion:0.1.0 ShortDescription:Docker Buildx Vendor:Docker Inc. Version:v0.10.2] map[Name:compose Path:/usr/libexec/docker/cli-plugins/docker-compose SchemaVersion:0.1.0 ShortDescription:Docker Compose Vendor:Docker Inc. Version:v2.16.0] map[Name:scan Path:/usr/libexec/docker/cli-plugins/docker-scan SchemaVersion:0.1.0 ShortDescription:Docker Scan Vendor:Docker Inc. Version:v0.23.0]] Warnings:<nil>}}
I0330 13:52:09.750846   54684 docker.go:282] overlay module found
I0330 13:52:09.750854   54684 global.go:122] docker default: true priority: 9, state: {Installed:true Healthy:true Running:false NeedsImprovement:false Error:<nil> Reason: Fix: Doc: Version:}
I0330 13:52:10.457274   54684 global.go:122] kvm2 default: true priority: 8, state: {Installed:true Healthy:true Running:true NeedsImprovement:false Error:<nil> Reason: Fix: Doc: Version:}
I0330 13:52:10.479389   54684 global.go:122] none default: false priority: 4, state: {Installed:false Healthy:false Running:false NeedsImprovement:false Error:running the 'none' driver as a regular user requires sudo permissions Reason: Fix: Doc: Version:}
I0330 13:52:10.479597   54684 global.go:122] podman default: true priority: 7, state: {Installed:false Healthy:false Running:false NeedsImprovement:false Error:exec: "podman": executable file not found in $PATH Reason: Fix:Install Podman Doc:https://minikube.sigs.k8s.io/docs/drivers/podman/ Version:}
I0330 13:52:10.479621   54684 driver.go:300] not recommending "ssh" due to default: false
I0330 13:52:10.479635   54684 driver.go:335] Picked: docker
I0330 13:52:10.479646   54684 driver.go:336] Alternatives: [kvm2 qemu2 virtualbox ssh]
I0330 13:52:10.479649   54684 driver.go:337] Rejects: [vmware none podman]
I0330 13:52:10.482079   54684 out.go:177] ✨  Automatically selected the docker driver. Other choices: kvm2, qemu2, virtualbox, ssh
I0330 13:52:10.483834   54684 start.go:296] selected driver: docker
I0330 13:52:10.483855   54684 start.go:857] validating driver "docker" against <nil>
I0330 13:52:10.483875   54684 start.go:868] status for docker: {Installed:true Healthy:true Running:false NeedsImprovement:false Error:<nil> Reason: Fix: Doc: Version:}
I0330 13:52:10.484023   54684 cli_runner.go:164] Run: docker system info --format "{{json .}}"
I0330 13:52:10.689451   54684 info.go:266] docker info: {ID:642e1ccf-744a-4421-948e-db1c6cf1d758 Containers:0 ContainersRunning:0 ContainersPaused:0 ContainersStopped:0 Images:4 Driver:overlay2 DriverStatus:[[Backing Filesystem extfs] [Supports d_type true] [Using metacopy false] [Native Overlay Diff true] [userxattr false]] SystemStatus:<nil> Plugins:{Volume:[local] Network:[bridge host ipvlan macvlan null overlay] Authorization:<nil> Log:[awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog]} MemoryLimit:true SwapLimit:true KernelMemory:false KernelMemoryTCP:false CPUCfsPeriod:true CPUCfsQuota:true CPUShares:true CPUSet:true PidsLimit:true IPv4Forwarding:true BridgeNfIptables:true BridgeNfIP6Tables:true Debug:false NFd:22 OomKillDisable:false NGoroutines:32 SystemTime:2023-03-30 13:52:10.679059877 +0530 IST LoggingDriver:json-file CgroupDriver:systemd NEventsListener:0 KernelVersion:6.2.6-76060206-generic OperatingSystem:Pop!_OS 22.04 LTS OSType:linux Architecture:x86_64 IndexServerAddress:https://index.docker.io/v1/ RegistryConfig:{AllowNondistributableArtifactsCIDRs:[] AllowNondistributableArtifactsHostnames:[] InsecureRegistryCIDRs:[127.0.0.0/8] IndexConfigs:{DockerIo:{Name:docker.io Mirrors:[] Secure:true Official:true}} Mirrors:[]} NCPU:8 MemTotal:8146669568 GenericResources:<nil> DockerRootDir:/var/lib/docker HTTPProxy: HTTPSProxy: NoProxy: Name:pop-os Labels:[] ExperimentalBuild:false ServerVersion:23.0.1 ClusterStore: ClusterAdvertise: Runtimes:{Runc:{Path:runc}} DefaultRuntime:runc Swarm:{NodeID: NodeAddr: LocalNodeState:inactive ControlAvailable:false Error: RemoteManagers:<nil>} LiveRestoreEnabled:false Isolation: InitBinary:docker-init ContainerdCommit:{ID:2456e983eb9e37e47538f59ea18f2043c9a73640 Expected:2456e983eb9e37e47538f59ea18f2043c9a73640} RuncCommit:{ID:v1.1.4-0-g5fd4c4d Expected:v1.1.4-0-g5fd4c4d} InitCommit:{ID:de40ad0 Expected:de40ad0} SecurityOptions:[name=apparmor name=seccomp,profile=builtin name=cgroupns] ProductLicense: Warnings:<nil> ServerErrors:[] ClientInfo:{Debug:false Plugins:[map[Name:buildx Path:/usr/libexec/docker/cli-plugins/docker-buildx SchemaVersion:0.1.0 ShortDescription:Docker Buildx Vendor:Docker Inc. Version:v0.10.2] map[Name:compose Path:/usr/libexec/docker/cli-plugins/docker-compose SchemaVersion:0.1.0 ShortDescription:Docker Compose Vendor:Docker Inc. Version:v2.16.0] map[Name:scan Path:/usr/libexec/docker/cli-plugins/docker-scan SchemaVersion:0.1.0 ShortDescription:Docker Scan Vendor:Docker Inc. Version:v0.23.0]] Warnings:<nil>}}
I0330 13:52:10.689710   54684 start_flags.go:305] no existing cluster config was found, will generate one from the flags 
I0330 13:52:10.690704   54684 start_flags.go:386] Using suggested 2200MB memory alloc based on sys=7769MB, container=7769MB
I0330 13:52:10.690946   54684 start_flags.go:899] Wait components to verify : map[apiserver:true system_pods:true]
I0330 13:52:10.695352   54684 out.go:177] 📌  Using Docker driver with root privileges
I0330 13:52:10.697436   54684 cni.go:84] Creating CNI manager for ""
I0330 13:52:10.697496   54684 cni.go:157] "docker" driver + "docker" container runtime found on kubernetes v1.24+, recommending bridge
I0330 13:52:10.697520   54684 start_flags.go:314] Found "bridge CNI" CNI - setting NetworkPlugin=cni
I0330 13:52:10.697543   54684 start_flags.go:319] config:
{Name:minikube KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.37@sha256:8bf7a0e8a062bc5e2b71d28b35bfa9cc862d9220e234e86176b3785f685d8b15 Memory:2200 CPUs:2 DiskSize:20000 VMDriver: Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:0 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.26.1 ClusterName:minikube Namespace:default APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:} Nodes:[] Addons:map[] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/home/fazil:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP:}
I0330 13:52:10.700222   54684 out.go:177] 👍  Starting control plane node minikube in cluster minikube
I0330 13:52:10.701856   54684 cache.go:120] Beginning downloading kic base image for docker with docker
I0330 13:52:10.703461   54684 out.go:177] 🚜  Pulling base image ...
I0330 13:52:10.704949   54684 preload.go:132] Checking if preload exists for k8s version v1.26.1 and runtime docker
I0330 13:52:10.705071   54684 preload.go:148] Found local preload: /home/fazil/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.26.1-docker-overlay2-amd64.tar.lz4
I0330 13:52:10.705082   54684 cache.go:57] Caching tarball of preloaded images
I0330 13:52:10.705082   54684 image.go:77] Checking for gcr.io/k8s-minikube/kicbase:v0.0.37@sha256:8bf7a0e8a062bc5e2b71d28b35bfa9cc862d9220e234e86176b3785f685d8b15 in local docker daemon
I0330 13:52:10.705399   54684 preload.go:174] Found /home/fazil/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.26.1-docker-overlay2-amd64.tar.lz4 in cache, skipping download
I0330 13:52:10.705419   54684 cache.go:60] Finished verifying existence of preloaded tar for  v1.26.1 on docker
I0330 13:52:10.706426   54684 profile.go:148] Saving config to /home/fazil/.minikube/profiles/minikube/config.json ...
I0330 13:52:10.706452   54684 lock.go:35] WriteFile acquiring /home/fazil/.minikube/profiles/minikube/config.json: {Name:mk28554b8e453be3e40c5921746b869fc337e84c Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0330 13:52:10.816837   54684 image.go:81] Found gcr.io/k8s-minikube/kicbase:v0.0.37@sha256:8bf7a0e8a062bc5e2b71d28b35bfa9cc862d9220e234e86176b3785f685d8b15 in local docker daemon, skipping pull
I0330 13:52:10.816867   54684 cache.go:143] gcr.io/k8s-minikube/kicbase:v0.0.37@sha256:8bf7a0e8a062bc5e2b71d28b35bfa9cc862d9220e234e86176b3785f685d8b15 exists in daemon, skipping load
I0330 13:52:10.816899   54684 cache.go:193] Successfully downloaded all kic artifacts
I0330 13:52:10.816972   54684 start.go:364] acquiring machines lock for minikube: {Name:mk88eb3e9b06946896ddb57e4fd8bc78e1ff34fb Clock:{} Delay:500ms Timeout:10m0s Cancel:<nil>}
I0330 13:52:10.817142   54684 start.go:368] acquired machines lock for "minikube" in 138.207µs
I0330 13:52:10.817169   54684 start.go:93] Provisioning new machine with config: &{Name:minikube KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.37@sha256:8bf7a0e8a062bc5e2b71d28b35bfa9cc862d9220e234e86176b3785f685d8b15 Memory:2200 CPUs:2 DiskSize:20000 VMDriver: Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:0 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.26.1 ClusterName:minikube Namespace:default APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:} Nodes:[{Name: IP: Port:8443 KubernetesVersion:v1.26.1 ContainerRuntime:docker ControlPlane:true Worker:true}] Addons:map[] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/home/fazil:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP:} &{Name: IP: Port:8443 KubernetesVersion:v1.26.1 ContainerRuntime:docker ControlPlane:true Worker:true}
I0330 13:52:10.817296   54684 start.go:125] createHost starting for "" (driver="docker")
I0330 13:52:10.820674   54684 out.go:204] 🔥  Creating docker container (CPUs=2, Memory=2200MB) ...
I0330 13:52:10.821015   54684 start.go:159] libmachine.API.Create for "minikube" (driver="docker")
I0330 13:52:10.821038   54684 client.go:168] LocalClient.Create starting
I0330 13:52:10.821090   54684 main.go:141] libmachine: Reading certificate data from /home/fazil/.minikube/certs/ca.pem
I0330 13:52:10.821496   54684 main.go:141] libmachine: Decoding PEM data...
I0330 13:52:10.821516   54684 main.go:141] libmachine: Parsing certificate...
I0330 13:52:10.821602   54684 main.go:141] libmachine: Reading certificate data from /home/fazil/.minikube/certs/cert.pem
I0330 13:52:10.821681   54684 main.go:141] libmachine: Decoding PEM data...
I0330 13:52:10.821689   54684 main.go:141] libmachine: Parsing certificate...
I0330 13:52:10.821985   54684 cli_runner.go:164] Run: docker network inspect minikube --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
W0330 13:52:10.934062   54684 cli_runner.go:211] docker network inspect minikube --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}" returned with exit code 1
I0330 13:52:10.934113   54684 network_create.go:281] running [docker network inspect minikube] to gather additional debugging logs...
I0330 13:52:10.934124   54684 cli_runner.go:164] Run: docker network inspect minikube
W0330 13:52:11.052125   54684 cli_runner.go:211] docker network inspect minikube returned with exit code 1
I0330 13:52:11.052149   54684 network_create.go:284] error running [docker network inspect minikube]: docker network inspect minikube: exit status 1
stdout:
[]

stderr:
Error response from daemon: network minikube not found
I0330 13:52:11.052165   54684 network_create.go:286] output of [docker network inspect minikube]: -- stdout --
[]

-- /stdout --
** stderr ** 
Error response from daemon: network minikube not found

** /stderr **
I0330 13:52:11.052219   54684 cli_runner.go:164] Run: docker network inspect bridge --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
I0330 13:52:11.155326   54684 network.go:211] skipping subnet 192.168.48.0/22 that is taken: &{IP:192.168.48.0 Netmask:255.255.252.0 Prefix:22 CIDR:192.168.48.0/22 Gateway:192.168.48.62 ClientMin:192.168.48.63 ClientMax:192.168.51.254 Broadcast:192.168.51.255 IsPrivate:true Interface:{IfaceName:wlp3s0 IfaceIPv4:192.168.48.62 IfaceMTU:1500 IfaceMAC:ec:2e:98:f6:11:d5} reservation:<nil>}
I0330 13:52:11.157070   54684 network.go:206] using free private subnet 192.168.58.0/24: &{IP:192.168.58.0 Netmask:255.255.255.0 Prefix:24 CIDR:192.168.58.0/24 Gateway:192.168.58.1 ClientMin:192.168.58.2 ClientMax:192.168.58.254 Broadcast:192.168.58.255 IsPrivate:true Interface:{IfaceName: IfaceIPv4: IfaceMTU:0 IfaceMAC:} reservation:0xc001328740}
I0330 13:52:11.157225   54684 network_create.go:123] attempt to create docker network minikube 192.168.58.0/24 with gateway 192.168.58.1 and MTU of 1500 ...
I0330 13:52:11.157484   54684 cli_runner.go:164] Run: docker network create --driver=bridge --subnet=192.168.58.0/24 --gateway=192.168.58.1 -o --ip-masq -o --icc -o com.docker.network.driver.mtu=1500 --label=created_by.minikube.sigs.k8s.io=true --label=name.minikube.sigs.k8s.io=minikube minikube
I0330 13:52:11.373182   54684 network_create.go:107] docker network minikube 192.168.58.0/24 created
I0330 13:52:11.373262   54684 kic.go:117] calculated static IP "192.168.58.2" for the "minikube" container
I0330 13:52:11.373428   54684 cli_runner.go:164] Run: docker ps -a --format {{.Names}}
I0330 13:52:11.495072   54684 cli_runner.go:164] Run: docker volume create minikube --label name.minikube.sigs.k8s.io=minikube --label created_by.minikube.sigs.k8s.io=true
I0330 13:52:11.616956   54684 oci.go:103] Successfully created a docker volume minikube
I0330 13:52:11.617031   54684 cli_runner.go:164] Run: docker run --rm --name minikube-preload-sidecar --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=minikube --entrypoint /usr/bin/test -v minikube:/var gcr.io/k8s-minikube/kicbase:v0.0.37@sha256:8bf7a0e8a062bc5e2b71d28b35bfa9cc862d9220e234e86176b3785f685d8b15 -d /var/lib
I0330 13:52:12.973997   54684 cli_runner.go:217] Completed: docker run --rm --name minikube-preload-sidecar --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=minikube --entrypoint /usr/bin/test -v minikube:/var gcr.io/k8s-minikube/kicbase:v0.0.37@sha256:8bf7a0e8a062bc5e2b71d28b35bfa9cc862d9220e234e86176b3785f685d8b15 -d /var/lib: (1.356912095s)
I0330 13:52:12.974021   54684 oci.go:107] Successfully prepared a docker volume minikube
I0330 13:52:12.974055   54684 preload.go:132] Checking if preload exists for k8s version v1.26.1 and runtime docker
I0330 13:52:12.974075   54684 kic.go:190] Starting extracting preloaded images to volume ...
I0330 13:52:12.974135   54684 cli_runner.go:164] Run: docker run --rm --entrypoint /usr/bin/tar -v /home/fazil/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.26.1-docker-overlay2-amd64.tar.lz4:/preloaded.tar:ro -v minikube:/extractDir gcr.io/k8s-minikube/kicbase:v0.0.37@sha256:8bf7a0e8a062bc5e2b71d28b35bfa9cc862d9220e234e86176b3785f685d8b15 -I lz4 -xf /preloaded.tar -C /extractDir
I0330 13:52:18.057118   54684 cli_runner.go:217] Completed: docker run --rm --entrypoint /usr/bin/tar -v /home/fazil/.minikube/cache/preloaded-tarball/preloaded-images-k8s-v18-v1.26.1-docker-overlay2-amd64.tar.lz4:/preloaded.tar:ro -v minikube:/extractDir gcr.io/k8s-minikube/kicbase:v0.0.37@sha256:8bf7a0e8a062bc5e2b71d28b35bfa9cc862d9220e234e86176b3785f685d8b15 -I lz4 -xf /preloaded.tar -C /extractDir: (5.082915014s)
I0330 13:52:18.057152   54684 kic.go:199] duration metric: took 5.083071 seconds to extract preloaded images to volume
W0330 13:52:18.057398   54684 cgroups_linux.go:77] Your kernel does not support swap limit capabilities or the cgroup is not mounted.
W0330 13:52:18.057623   54684 oci.go:240] Your kernel does not support CPU cfs period/quota or the cgroup is not mounted.
I0330 13:52:18.057848   54684 cli_runner.go:164] Run: docker info --format "'{{json .SecurityOptions}}'"
I0330 13:52:18.239867   54684 cli_runner.go:164] Run: docker run -d -t --privileged --security-opt seccomp=unconfined --tmpfs /tmp --tmpfs /run -v /lib/modules:/lib/modules:ro --hostname minikube --name minikube --label created_by.minikube.sigs.k8s.io=true --label name.minikube.sigs.k8s.io=minikube --label role.minikube.sigs.k8s.io= --label mode.minikube.sigs.k8s.io=minikube --network minikube --ip 192.168.58.2 --volume minikube:/var --security-opt apparmor=unconfined --memory=2200mb -e container=docker --expose 8443 --publish=127.0.0.1::8443 --publish=127.0.0.1::22 --publish=127.0.0.1::2376 --publish=127.0.0.1::5000 --publish=127.0.0.1::32443 gcr.io/k8s-minikube/kicbase:v0.0.37@sha256:8bf7a0e8a062bc5e2b71d28b35bfa9cc862d9220e234e86176b3785f685d8b15
I0330 13:52:18.942945   54684 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Running}}
I0330 13:52:19.069249   54684 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
I0330 13:52:19.174631   54684 cli_runner.go:164] Run: docker exec minikube stat /var/lib/dpkg/alternatives/iptables
I0330 13:52:19.285844   54684 oci.go:144] the created container "minikube" has a running status.
I0330 13:52:19.285859   54684 kic.go:221] Creating ssh key for kic: /home/fazil/.minikube/machines/minikube/id_rsa...
I0330 13:52:19.513802   54684 kic_runner.go:191] docker (temp): /home/fazil/.minikube/machines/minikube/id_rsa.pub --> /home/docker/.ssh/authorized_keys (381 bytes)
I0330 13:52:19.747686   54684 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
I0330 13:52:19.855310   54684 kic_runner.go:93] Run: chown docker:docker /home/docker/.ssh/authorized_keys
I0330 13:52:19.855322   54684 kic_runner.go:114] Args: [docker exec --privileged minikube chown docker:docker /home/docker/.ssh/authorized_keys]
I0330 13:52:20.056823   54684 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
I0330 13:52:20.273826   54684 machine.go:88] provisioning docker machine ...
I0330 13:52:20.273855   54684 ubuntu.go:169] provisioning hostname "minikube"
I0330 13:52:20.273986   54684 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0330 13:52:20.362908   54684 main.go:141] libmachine: Using SSH client type: native
I0330 13:52:20.363023   54684 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x7f1980] 0x7f4b00 <nil>  [] 0s} 127.0.0.1 32777 <nil> <nil>}
I0330 13:52:20.363030   54684 main.go:141] libmachine: About to run SSH command:
sudo hostname minikube && echo "minikube" | sudo tee /etc/hostname
I0330 13:52:20.576330   54684 main.go:141] libmachine: SSH cmd err, output: <nil>: minikube

I0330 13:52:20.576376   54684 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0330 13:52:20.685169   54684 main.go:141] libmachine: Using SSH client type: native
I0330 13:52:20.685422   54684 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x7f1980] 0x7f4b00 <nil>  [] 0s} 127.0.0.1 32777 <nil> <nil>}
I0330 13:52:20.685444   54684 main.go:141] libmachine: About to run SSH command:

		if ! grep -xq '.*\sminikube' /etc/hosts; then
			if grep -xq '127.0.1.1\s.*' /etc/hosts; then
				sudo sed -i 's/^127.0.1.1\s.*/127.0.1.1 minikube/g' /etc/hosts;
			else 
				echo '127.0.1.1 minikube' | sudo tee -a /etc/hosts; 
			fi
		fi
I0330 13:52:20.833237   54684 main.go:141] libmachine: SSH cmd err, output: <nil>: 
I0330 13:52:20.833299   54684 ubuntu.go:175] set auth options {CertDir:/home/fazil/.minikube CaCertPath:/home/fazil/.minikube/certs/ca.pem CaPrivateKeyPath:/home/fazil/.minikube/certs/ca-key.pem CaCertRemotePath:/etc/docker/ca.pem ServerCertPath:/home/fazil/.minikube/machines/server.pem ServerKeyPath:/home/fazil/.minikube/machines/server-key.pem ClientKeyPath:/home/fazil/.minikube/certs/key.pem ServerCertRemotePath:/etc/docker/server.pem ServerKeyRemotePath:/etc/docker/server-key.pem ClientCertPath:/home/fazil/.minikube/certs/cert.pem ServerCertSANs:[] StorePath:/home/fazil/.minikube}
I0330 13:52:20.833352   54684 ubuntu.go:177] setting up certificates
I0330 13:52:20.833375   54684 provision.go:83] configureAuth start
I0330 13:52:20.833470   54684 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I0330 13:52:20.913461   54684 provision.go:138] copyHostCerts
I0330 13:52:20.913509   54684 exec_runner.go:144] found /home/fazil/.minikube/ca.pem, removing ...
I0330 13:52:20.913514   54684 exec_runner.go:207] rm: /home/fazil/.minikube/ca.pem
I0330 13:52:20.913580   54684 exec_runner.go:151] cp: /home/fazil/.minikube/certs/ca.pem --> /home/fazil/.minikube/ca.pem (1074 bytes)
I0330 13:52:20.913683   54684 exec_runner.go:144] found /home/fazil/.minikube/cert.pem, removing ...
I0330 13:52:20.913689   54684 exec_runner.go:207] rm: /home/fazil/.minikube/cert.pem
I0330 13:52:20.913714   54684 exec_runner.go:151] cp: /home/fazil/.minikube/certs/cert.pem --> /home/fazil/.minikube/cert.pem (1119 bytes)
I0330 13:52:20.913757   54684 exec_runner.go:144] found /home/fazil/.minikube/key.pem, removing ...
I0330 13:52:20.913761   54684 exec_runner.go:207] rm: /home/fazil/.minikube/key.pem
I0330 13:52:20.913783   54684 exec_runner.go:151] cp: /home/fazil/.minikube/certs/key.pem --> /home/fazil/.minikube/key.pem (1679 bytes)
I0330 13:52:20.913906   54684 provision.go:112] generating server cert: /home/fazil/.minikube/machines/server.pem ca-key=/home/fazil/.minikube/certs/ca.pem private-key=/home/fazil/.minikube/certs/ca-key.pem org=fazil.minikube san=[192.168.58.2 127.0.0.1 localhost 127.0.0.1 minikube minikube]
I0330 13:52:21.125862   54684 provision.go:172] copyRemoteCerts
I0330 13:52:21.125892   54684 ssh_runner.go:195] Run: sudo mkdir -p /etc/docker /etc/docker /etc/docker
I0330 13:52:21.125913   54684 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0330 13:52:21.229733   54684 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32777 SSHKeyPath:/home/fazil/.minikube/machines/minikube/id_rsa Username:docker}
I0330 13:52:21.355348   54684 ssh_runner.go:362] scp /home/fazil/.minikube/certs/ca.pem --> /etc/docker/ca.pem (1074 bytes)
I0330 13:52:21.432770   54684 ssh_runner.go:362] scp /home/fazil/.minikube/machines/server.pem --> /etc/docker/server.pem (1196 bytes)
I0330 13:52:21.474897   54684 ssh_runner.go:362] scp /home/fazil/.minikube/machines/server-key.pem --> /etc/docker/server-key.pem (1675 bytes)
I0330 13:52:21.519941   54684 provision.go:86] duration metric: configureAuth took 686.554012ms
I0330 13:52:21.519958   54684 ubuntu.go:193] setting minikube options for container-runtime
I0330 13:52:21.520108   54684 config.go:180] Loaded profile config "minikube": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.26.1
I0330 13:52:21.520136   54684 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0330 13:52:21.696717   54684 main.go:141] libmachine: Using SSH client type: native
I0330 13:52:21.696947   54684 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x7f1980] 0x7f4b00 <nil>  [] 0s} 127.0.0.1 32777 <nil> <nil>}
I0330 13:52:21.696977   54684 main.go:141] libmachine: About to run SSH command:
df --output=fstype / | tail -n 1
I0330 13:52:21.843680   54684 main.go:141] libmachine: SSH cmd err, output: <nil>: overlay

I0330 13:52:21.843694   54684 ubuntu.go:71] root file system type: overlay
I0330 13:52:21.843811   54684 provision.go:309] Updating docker unit: /lib/systemd/system/docker.service ...
I0330 13:52:21.843846   54684 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0330 13:52:21.919867   54684 main.go:141] libmachine: Using SSH client type: native
I0330 13:52:21.920002   54684 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x7f1980] 0x7f4b00 <nil>  [] 0s} 127.0.0.1 32777 <nil> <nil>}
I0330 13:52:21.920072   54684 main.go:141] libmachine: About to run SSH command:
sudo mkdir -p /lib/systemd/system && printf %!s(MISSING) "[Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure



# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP \$MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target
" | sudo tee /lib/systemd/system/docker.service.new
I0330 13:52:22.084909   54684 main.go:141] libmachine: SSH cmd err, output: <nil>: [Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
BindsTo=containerd.service
After=network-online.target firewalld.service containerd.service
Wants=network-online.target
Requires=docker.socket
StartLimitBurst=3
StartLimitIntervalSec=60

[Service]
Type=notify
Restart=on-failure



# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
# The base configuration already specifies an 'ExecStart=...' command. The first directive
# here is to clear out that command inherited from the base configuration. Without this,
# the command from the base configuration and the command specified here are treated as
# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
# will catch this invalid input and refuse to start the service with an error like:
#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.

# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
ExecStart=
ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
ExecReload=/bin/kill -s HUP $MAINPID

# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
TasksMax=infinity
TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

[Install]
WantedBy=multi-user.target

I0330 13:52:22.084995   54684 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0330 13:52:22.218464   54684 main.go:141] libmachine: Using SSH client type: native
I0330 13:52:22.218949   54684 main.go:141] libmachine: &{{{<nil> 0 [] [] []} docker [0x7f1980] 0x7f4b00 <nil>  [] 0s} 127.0.0.1 32777 <nil> <nil>}
I0330 13:52:22.218965   54684 main.go:141] libmachine: About to run SSH command:
sudo diff -u /lib/systemd/system/docker.service /lib/systemd/system/docker.service.new || { sudo mv /lib/systemd/system/docker.service.new /lib/systemd/system/docker.service; sudo systemctl -f daemon-reload && sudo systemctl -f enable docker && sudo systemctl -f restart docker; }
I0330 13:52:23.993424   54684 main.go:141] libmachine: SSH cmd err, output: <nil>: --- /lib/systemd/system/docker.service	2023-01-19 17:34:14.000000000 +0000
+++ /lib/systemd/system/docker.service.new	2023-03-30 08:22:22.080916829 +0000
@@ -1,30 +1,32 @@
 [Unit]
 Description=Docker Application Container Engine
 Documentation=https://docs.docker.com
-After=network-online.target docker.socket firewalld.service containerd.service
+BindsTo=containerd.service
+After=network-online.target firewalld.service containerd.service
 Wants=network-online.target
-Requires=docker.socket containerd.service
+Requires=docker.socket
+StartLimitBurst=3
+StartLimitIntervalSec=60
 
 [Service]
 Type=notify
-# the default is not to use systemd for cgroups because the delegate issues still
-# exists and systemd currently does not support the cgroup feature set required
-# for containers run by docker
-ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock
-ExecReload=/bin/kill -s HUP $MAINPID
-TimeoutSec=0
-RestartSec=2
-Restart=always
-
-# Note that StartLimit* options were moved from "Service" to "Unit" in systemd 229.
-# Both the old, and new location are accepted by systemd 229 and up, so using the old location
-# to make them work for either version of systemd.
-StartLimitBurst=3
+Restart=on-failure
 
-# Note that StartLimitInterval was renamed to StartLimitIntervalSec in systemd 230.
-# Both the old, and new name are accepted by systemd 230 and up, so using the old name to make
-# this option work for either version of systemd.
-StartLimitInterval=60s
+
+
+# This file is a systemd drop-in unit that inherits from the base dockerd configuration.
+# The base configuration already specifies an 'ExecStart=...' command. The first directive
+# here is to clear out that command inherited from the base configuration. Without this,
+# the command from the base configuration and the command specified here are treated as
+# a sequence of commands, which is not the desired behavior, nor is it valid -- systemd
+# will catch this invalid input and refuse to start the service with an error like:
+#  Service has more than one ExecStart= setting, which is only allowed for Type=oneshot services.
+
+# NOTE: default-ulimit=nofile is set to an arbitrary number for consistency with other
+# container runtimes. If left unlimited, it may result in OOM issues with MySQL.
+ExecStart=
+ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2376 -H unix:///var/run/docker.sock --default-ulimit=nofile=1048576:1048576 --tlsverify --tlscacert /etc/docker/ca.pem --tlscert /etc/docker/server.pem --tlskey /etc/docker/server-key.pem --label provider=docker --insecure-registry 10.96.0.0/12 
+ExecReload=/bin/kill -s HUP $MAINPID
 
 # Having non-zero Limit*s causes performance problems due to accounting overhead
 # in the kernel. We recommend using cgroups to do container-local accounting.
@@ -32,16 +34,16 @@
 LimitNPROC=infinity
 LimitCORE=infinity
 
-# Comment TasksMax if your systemd version does not support it.
-# Only systemd 226 and above support this option.
+# Uncomment TasksMax if your systemd version supports it.
+# Only systemd 226 and above support this version.
 TasksMax=infinity
+TimeoutStartSec=0
 
 # set delegate yes so that systemd does not reset the cgroups of docker containers
 Delegate=yes
 
 # kill only the docker process, not all processes in the cgroup
 KillMode=process
-OOMScoreAdjust=-500
 
 [Install]
 WantedBy=multi-user.target
Synchronizing state of docker.service with SysV service script with /lib/systemd/systemd-sysv-install.
Executing: /lib/systemd/systemd-sysv-install enable docker

I0330 13:52:23.993450   54684 machine.go:91] provisioned docker machine in 3.719610404s
I0330 13:52:23.993460   54684 client.go:171] LocalClient.Create took 13.172417072s
I0330 13:52:23.993478   54684 start.go:167] duration metric: libmachine.API.Create for "minikube" took 13.172464042s
I0330 13:52:23.993489   54684 start.go:300] post-start starting for "minikube" (driver="docker")
I0330 13:52:23.993495   54684 start.go:328] creating required directories: [/etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs]
I0330 13:52:23.993561   54684 ssh_runner.go:195] Run: sudo mkdir -p /etc/kubernetes/addons /etc/kubernetes/manifests /var/tmp/minikube /var/lib/minikube /var/lib/minikube/certs /var/lib/minikube/images /var/lib/minikube/binaries /tmp/gvisor /usr/share/ca-certificates /etc/ssl/certs
I0330 13:52:23.993614   54684 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0330 13:52:24.140732   54684 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32777 SSHKeyPath:/home/fazil/.minikube/machines/minikube/id_rsa Username:docker}
I0330 13:52:24.249835   54684 ssh_runner.go:195] Run: cat /etc/os-release
I0330 13:52:24.252949   54684 main.go:141] libmachine: Couldn't set key PRIVACY_POLICY_URL, no corresponding struct field found
I0330 13:52:24.252964   54684 main.go:141] libmachine: Couldn't set key VERSION_CODENAME, no corresponding struct field found
I0330 13:52:24.252971   54684 main.go:141] libmachine: Couldn't set key UBUNTU_CODENAME, no corresponding struct field found
I0330 13:52:24.252976   54684 info.go:137] Remote host: Ubuntu 20.04.5 LTS
I0330 13:52:24.252983   54684 filesync.go:126] Scanning /home/fazil/.minikube/addons for local assets ...
I0330 13:52:24.255498   54684 filesync.go:126] Scanning /home/fazil/.minikube/files for local assets ...
I0330 13:52:24.255644   54684 start.go:303] post-start completed in 262.142186ms
I0330 13:52:24.255891   54684 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I0330 13:52:24.313793   54684 profile.go:148] Saving config to /home/fazil/.minikube/profiles/minikube/config.json ...
I0330 13:52:24.313954   54684 ssh_runner.go:195] Run: sh -c "df -h /var | awk 'NR==2{print $5}'"
I0330 13:52:24.313975   54684 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0330 13:52:24.360489   54684 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32777 SSHKeyPath:/home/fazil/.minikube/machines/minikube/id_rsa Username:docker}
I0330 13:52:24.456284   54684 ssh_runner.go:195] Run: sh -c "df -BG /var | awk 'NR==2{print $4}'"
I0330 13:52:24.465852   54684 start.go:128] duration metric: createHost completed in 13.648542355s
I0330 13:52:24.465872   54684 start.go:83] releasing machines lock for "minikube", held for 13.648719132s
I0330 13:52:24.465936   54684 cli_runner.go:164] Run: docker container inspect -f "{{range .NetworkSettings.Networks}}{{.IPAddress}},{{.GlobalIPv6Address}}{{end}}" minikube
I0330 13:52:24.600655   54684 ssh_runner.go:195] Run: cat /version.json
I0330 13:52:24.600799   54684 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0330 13:52:24.600839   54684 ssh_runner.go:195] Run: curl -sS -m 2 https://registry.k8s.io/
I0330 13:52:24.600960   54684 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0330 13:52:24.789887   54684 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32777 SSHKeyPath:/home/fazil/.minikube/machines/minikube/id_rsa Username:docker}
I0330 13:52:24.809596   54684 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32777 SSHKeyPath:/home/fazil/.minikube/machines/minikube/id_rsa Username:docker}
I0330 13:52:24.910722   54684 ssh_runner.go:195] Run: systemctl --version
I0330 13:52:25.194371   54684 ssh_runner.go:195] Run: sh -c "stat /etc/cni/net.d/*loopback.conf*"
I0330 13:52:25.205172   54684 ssh_runner.go:195] Run: sudo find /etc/cni/net.d -maxdepth 1 -type f -name *loopback.conf* -not -name *.mk_disabled -exec sh -c "grep -q loopback {} && ( grep -q name {} || sudo sed -i '/"type": "loopback"/i \ \ \ \ "name": "loopback",' {} ) && sudo sed -i 's|"cniVersion": ".*"|"cniVersion": "1.0.0"|g' {}" ;
I0330 13:52:25.263920   54684 cni.go:229] loopback cni configuration patched: "/etc/cni/net.d/*loopback.conf*" found
I0330 13:52:25.264396   54684 ssh_runner.go:195] Run: sudo mkdir -p /etc/systemd/system/cri-docker.service.d
I0330 13:52:25.274141   54684 ssh_runner.go:362] scp memory --> /etc/systemd/system/cri-docker.service.d/10-cni.conf (135 bytes)
I0330 13:52:25.307554   54684 ssh_runner.go:195] Run: sudo find /etc/cni/net.d -maxdepth 1 -type f ( ( -name *bridge* -or -name *podman* ) -and -not -name *.mk_disabled ) -printf "%!p(MISSING), " -exec sh -c "sudo mv {} {}.mk_disabled" ;
I0330 13:52:25.345914   54684 cni.go:261] disabled [/etc/cni/net.d/100-crio-bridge.conf] bridge cni config(s)
I0330 13:52:25.345956   54684 start.go:483] detecting cgroup driver to use...
I0330 13:52:25.346080   54684 detect.go:199] detected "systemd" cgroup driver on host os
I0330 13:52:25.346376   54684 ssh_runner.go:195] Run: /bin/bash -c "sudo mkdir -p /etc && printf %!s(MISSING) "runtime-endpoint: unix:///run/containerd/containerd.sock
image-endpoint: unix:///run/containerd/containerd.sock
" | sudo tee /etc/crictl.yaml"
I0330 13:52:25.381042   54684 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)sandbox_image = .*$|\1sandbox_image = "registry.k8s.io/pause:3.9"|' /etc/containerd/config.toml"
I0330 13:52:25.401514   54684 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)restrict_oom_score_adj = .*$|\1restrict_oom_score_adj = false|' /etc/containerd/config.toml"
I0330 13:52:25.421140   54684 containerd.go:145] configuring containerd to use "systemd" as cgroup driver...
I0330 13:52:25.421249   54684 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)SystemdCgroup = .*$|\1SystemdCgroup = true|g' /etc/containerd/config.toml"
I0330 13:52:25.439042   54684 ssh_runner.go:195] Run: sh -c "sudo sed -i 's|"io.containerd.runtime.v1.linux"|"io.containerd.runc.v2"|g' /etc/containerd/config.toml"
I0330 13:52:25.458230   54684 ssh_runner.go:195] Run: sh -c "sudo sed -i '/systemd_cgroup/d' /etc/containerd/config.toml"
I0330 13:52:25.480029   54684 ssh_runner.go:195] Run: sh -c "sudo sed -i 's|"io.containerd.runc.v1"|"io.containerd.runc.v2"|g' /etc/containerd/config.toml"
I0330 13:52:25.501474   54684 ssh_runner.go:195] Run: sh -c "sudo rm -rf /etc/cni/net.mk"
I0330 13:52:25.526535   54684 ssh_runner.go:195] Run: sh -c "sudo sed -i -r 's|^( *)conf_dir = .*$|\1conf_dir = "/etc/cni/net.d"|g' /etc/containerd/config.toml"
I0330 13:52:25.543749   54684 ssh_runner.go:195] Run: sudo sysctl net.bridge.bridge-nf-call-iptables
I0330 13:52:25.563295   54684 ssh_runner.go:195] Run: sudo sh -c "echo 1 > /proc/sys/net/ipv4/ip_forward"
I0330 13:52:25.583179   54684 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0330 13:52:25.749327   54684 ssh_runner.go:195] Run: sudo systemctl restart containerd
I0330 13:52:25.949795   54684 start.go:483] detecting cgroup driver to use...
I0330 13:52:25.949849   54684 detect.go:199] detected "systemd" cgroup driver on host os
I0330 13:52:25.949928   54684 ssh_runner.go:195] Run: sudo systemctl cat docker.service
I0330 13:52:26.030455   54684 cruntime.go:273] skipping containerd shutdown because we are bound to it
I0330 13:52:26.030640   54684 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service crio
I0330 13:52:26.065269   54684 ssh_runner.go:195] Run: /bin/bash -c "sudo mkdir -p /etc && printf %!s(MISSING) "runtime-endpoint: unix:///var/run/cri-dockerd.sock
image-endpoint: unix:///var/run/cri-dockerd.sock
" | sudo tee /etc/crictl.yaml"
I0330 13:52:26.110606   54684 ssh_runner.go:195] Run: sudo systemctl unmask docker.service
I0330 13:52:26.287021   54684 ssh_runner.go:195] Run: sudo systemctl enable docker.socket
I0330 13:52:26.461112   54684 docker.go:529] configuring docker to use "systemd" as cgroup driver...
I0330 13:52:26.461152   54684 ssh_runner.go:362] scp memory --> /etc/docker/daemon.json (143 bytes)
I0330 13:52:26.509200   54684 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0330 13:52:26.694466   54684 ssh_runner.go:195] Run: sudo systemctl restart docker
I0330 13:52:27.787143   54684 ssh_runner.go:235] Completed: sudo systemctl restart docker: (1.092637294s)
I0330 13:52:27.787236   54684 ssh_runner.go:195] Run: sudo systemctl enable cri-docker.socket
I0330 13:52:27.986585   54684 ssh_runner.go:195] Run: sudo systemctl unmask cri-docker.socket
I0330 13:52:28.168431   54684 ssh_runner.go:195] Run: sudo systemctl enable cri-docker.socket
I0330 13:52:28.367623   54684 ssh_runner.go:195] Run: sudo systemctl daemon-reload
I0330 13:52:28.550092   54684 ssh_runner.go:195] Run: sudo systemctl restart cri-docker.socket
I0330 13:52:28.623477   54684 start.go:530] Will wait 60s for socket path /var/run/cri-dockerd.sock
I0330 13:52:28.623609   54684 ssh_runner.go:195] Run: stat /var/run/cri-dockerd.sock
I0330 13:52:28.631755   54684 start.go:551] Will wait 60s for crictl version
I0330 13:52:28.631805   54684 ssh_runner.go:195] Run: which crictl
I0330 13:52:28.637018   54684 ssh_runner.go:195] Run: sudo /usr/bin/crictl version
I0330 13:52:28.907607   54684 start.go:567] Version:  0.1.0
RuntimeName:  docker
RuntimeVersion:  20.10.23
RuntimeApiVersion:  v1alpha2
I0330 13:52:28.907748   54684 ssh_runner.go:195] Run: docker version --format {{.Server.Version}}
I0330 13:52:28.992795   54684 ssh_runner.go:195] Run: docker version --format {{.Server.Version}}
I0330 13:52:29.033713   54684 out.go:204] 🐳  Preparing Kubernetes v1.26.1 on Docker 20.10.23 ...
I0330 13:52:29.034060   54684 cli_runner.go:164] Run: docker network inspect minikube --format "{"Name": "{{.Name}}","Driver": "{{.Driver}}","Subnet": "{{range .IPAM.Config}}{{.Subnet}}{{end}}","Gateway": "{{range .IPAM.Config}}{{.Gateway}}{{end}}","MTU": {{if (index .Options "com.docker.network.driver.mtu")}}{{(index .Options "com.docker.network.driver.mtu")}}{{else}}0{{end}}, "ContainerIPs": [{{range $k,$v := .Containers }}"{{$v.IPv4Address}}",{{end}}]}"
I0330 13:52:29.120659   54684 ssh_runner.go:195] Run: grep 192.168.58.1	host.minikube.internal$ /etc/hosts
I0330 13:52:29.125275   54684 ssh_runner.go:195] Run: /bin/bash -c "{ grep -v $'\thost.minikube.internal$' "/etc/hosts"; echo "192.168.58.1	host.minikube.internal"; } > /tmp/h.$$; sudo cp /tmp/h.$$ "/etc/hosts""
I0330 13:52:29.137577   54684 preload.go:132] Checking if preload exists for k8s version v1.26.1 and runtime docker
I0330 13:52:29.137627   54684 ssh_runner.go:195] Run: docker images --format {{.Repository}}:{{.Tag}}
I0330 13:52:29.169456   54684 docker.go:630] Got preloaded images: -- stdout --
registry.k8s.io/kube-apiserver:v1.26.1
registry.k8s.io/kube-controller-manager:v1.26.1
registry.k8s.io/kube-scheduler:v1.26.1
registry.k8s.io/kube-proxy:v1.26.1
registry.k8s.io/etcd:3.5.6-0
registry.k8s.io/pause:3.9
registry.k8s.io/coredns/coredns:v1.9.3
gcr.io/k8s-minikube/storage-provisioner:v5

-- /stdout --
I0330 13:52:29.169504   54684 docker.go:560] Images already preloaded, skipping extraction
I0330 13:52:29.169674   54684 ssh_runner.go:195] Run: docker images --format {{.Repository}}:{{.Tag}}
I0330 13:52:29.201467   54684 docker.go:630] Got preloaded images: -- stdout --
registry.k8s.io/kube-apiserver:v1.26.1
registry.k8s.io/kube-scheduler:v1.26.1
registry.k8s.io/kube-controller-manager:v1.26.1
registry.k8s.io/kube-proxy:v1.26.1
registry.k8s.io/etcd:3.5.6-0
registry.k8s.io/pause:3.9
registry.k8s.io/coredns/coredns:v1.9.3
gcr.io/k8s-minikube/storage-provisioner:v5

-- /stdout --
I0330 13:52:29.201506   54684 cache_images.go:84] Images are preloaded, skipping loading
I0330 13:52:29.201640   54684 ssh_runner.go:195] Run: docker info --format {{.CgroupDriver}}
I0330 13:52:29.383092   54684 cni.go:84] Creating CNI manager for ""
I0330 13:52:29.383105   54684 cni.go:157] "docker" driver + "docker" container runtime found on kubernetes v1.24+, recommending bridge
I0330 13:52:29.383115   54684 kubeadm.go:87] Using pod CIDR: 10.244.0.0/16
I0330 13:52:29.383129   54684 kubeadm.go:172] kubeadm options: {CertDir:/var/lib/minikube/certs ServiceCIDR:10.96.0.0/12 PodSubnet:10.244.0.0/16 AdvertiseAddress:192.168.58.2 APIServerPort:8443 KubernetesVersion:v1.26.1 EtcdDataDir:/var/lib/minikube/etcd EtcdExtraArgs:map[] ClusterName:minikube NodeName:minikube DNSDomain:cluster.local CRISocket:/var/run/cri-dockerd.sock ImageRepository: ComponentOptions:[{Component:apiServer ExtraArgs:map[enable-admission-plugins:NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota] Pairs:map[certSANs:["127.0.0.1", "localhost", "192.168.58.2"]]} {Component:controllerManager ExtraArgs:map[allocate-node-cidrs:true leader-elect:false] Pairs:map[]} {Component:scheduler ExtraArgs:map[leader-elect:false] Pairs:map[]}] FeatureArgs:map[] NodeIP:192.168.58.2 CgroupDriver:systemd ClientCAFile:/var/lib/minikube/certs/ca.crt StaticPodPath:/etc/kubernetes/manifests ControlPlaneAddress:control-plane.minikube.internal KubeProxyOptions:map[] ResolvConfSearchRegression:false KubeletConfigOpts:map[hairpinMode:hairpin-veth runtimeRequestTimeout:15m]}
I0330 13:52:29.383236   54684 kubeadm.go:177] kubeadm config:
apiVersion: kubeadm.k8s.io/v1beta3
kind: InitConfiguration
localAPIEndpoint:
  advertiseAddress: 192.168.58.2
  bindPort: 8443
bootstrapTokens:
  - groups:
      - system:bootstrappers:kubeadm:default-node-token
    ttl: 24h0m0s
    usages:
      - signing
      - authentication
nodeRegistration:
  criSocket: /var/run/cri-dockerd.sock
  name: "minikube"
  kubeletExtraArgs:
    node-ip: 192.168.58.2
  taints: []
---
apiVersion: kubeadm.k8s.io/v1beta3
kind: ClusterConfiguration
apiServer:
  certSANs: ["127.0.0.1", "localhost", "192.168.58.2"]
  extraArgs:
    enable-admission-plugins: "NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,NodeRestriction,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota"
controllerManager:
  extraArgs:
    allocate-node-cidrs: "true"
    leader-elect: "false"
scheduler:
  extraArgs:
    leader-elect: "false"
certificatesDir: /var/lib/minikube/certs
clusterName: mk
controlPlaneEndpoint: control-plane.minikube.internal:8443
etcd:
  local:
    dataDir: /var/lib/minikube/etcd
    extraArgs:
      proxy-refresh-interval: "70000"
kubernetesVersion: v1.26.1
networking:
  dnsDomain: cluster.local
  podSubnet: "10.244.0.0/16"
  serviceSubnet: 10.96.0.0/12
---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
authentication:
  x509:
    clientCAFile: /var/lib/minikube/certs/ca.crt
cgroupDriver: systemd
hairpinMode: hairpin-veth
runtimeRequestTimeout: 15m
clusterDomain: "cluster.local"
# disable disk resource management by default
imageGCHighThresholdPercent: 100
evictionHard:
  nodefs.available: "0%!"(MISSING)
  nodefs.inodesFree: "0%!"(MISSING)
  imagefs.available: "0%!"(MISSING)
failSwapOn: false
staticPodPath: /etc/kubernetes/manifests
---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
clusterCIDR: "10.244.0.0/16"
metricsBindAddress: 0.0.0.0:10249
conntrack:
  maxPerCore: 0
# Skip setting "net.netfilter.nf_conntrack_tcp_timeout_established"
  tcpEstablishedTimeout: 0s
# Skip setting "net.netfilter.nf_conntrack_tcp_timeout_close"
  tcpCloseWaitTimeout: 0s

I0330 13:52:29.383286   54684 kubeadm.go:968] kubelet [Unit]
Wants=docker.socket

[Service]
ExecStart=
ExecStart=/var/lib/minikube/binaries/v1.26.1/kubelet --bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --config=/var/lib/kubelet/config.yaml --container-runtime=remote --container-runtime-endpoint=/var/run/cri-dockerd.sock --hostname-override=minikube --image-service-endpoint=/var/run/cri-dockerd.sock --kubeconfig=/etc/kubernetes/kubelet.conf --node-ip=192.168.58.2

[Install]
 config:
{KubernetesVersion:v1.26.1 ClusterName:minikube Namespace:default APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:}
I0330 13:52:29.383318   54684 ssh_runner.go:195] Run: sudo ls /var/lib/minikube/binaries/v1.26.1
I0330 13:52:29.396228   54684 binaries.go:44] Found k8s binaries, skipping transfer
I0330 13:52:29.396297   54684 ssh_runner.go:195] Run: sudo mkdir -p /etc/systemd/system/kubelet.service.d /lib/systemd/system /var/tmp/minikube
I0330 13:52:29.408253   54684 ssh_runner.go:362] scp memory --> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf (440 bytes)
I0330 13:52:29.422027   54684 ssh_runner.go:362] scp memory --> /lib/systemd/system/kubelet.service (352 bytes)
I0330 13:52:29.431691   54684 ssh_runner.go:362] scp memory --> /var/tmp/minikube/kubeadm.yaml.new (2083 bytes)
I0330 13:52:29.456630   54684 ssh_runner.go:195] Run: grep 192.168.58.2	control-plane.minikube.internal$ /etc/hosts
I0330 13:52:29.464042   54684 ssh_runner.go:195] Run: /bin/bash -c "{ grep -v $'\tcontrol-plane.minikube.internal$' "/etc/hosts"; echo "192.168.58.2	control-plane.minikube.internal"; } > /tmp/h.$$; sudo cp /tmp/h.$$ "/etc/hosts""
I0330 13:52:29.486316   54684 certs.go:56] Setting up /home/fazil/.minikube/profiles/minikube for IP: 192.168.58.2
I0330 13:52:29.486347   54684 certs.go:186] acquiring lock for shared ca certs: {Name:mkc37e33f768b502070714f7be19276445133c0d Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0330 13:52:29.486524   54684 certs.go:195] skipping minikubeCA CA generation: /home/fazil/.minikube/ca.key
I0330 13:52:29.486659   54684 certs.go:195] skipping proxyClientCA CA generation: /home/fazil/.minikube/proxy-client-ca.key
I0330 13:52:29.486697   54684 certs.go:315] generating minikube-user signed cert: /home/fazil/.minikube/profiles/minikube/client.key
I0330 13:52:29.486704   54684 crypto.go:68] Generating cert /home/fazil/.minikube/profiles/minikube/client.crt with IP's: []
I0330 13:52:29.863644   54684 crypto.go:156] Writing cert to /home/fazil/.minikube/profiles/minikube/client.crt ...
I0330 13:52:29.863656   54684 lock.go:35] WriteFile acquiring /home/fazil/.minikube/profiles/minikube/client.crt: {Name:mka828ad8bc174c47173668dd67280995f5ba585 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0330 13:52:29.863869   54684 crypto.go:164] Writing key to /home/fazil/.minikube/profiles/minikube/client.key ...
I0330 13:52:29.863875   54684 lock.go:35] WriteFile acquiring /home/fazil/.minikube/profiles/minikube/client.key: {Name:mk9333829c91a88b1645b6492e696576bd17e5a9 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0330 13:52:29.863939   54684 certs.go:315] generating minikube signed cert: /home/fazil/.minikube/profiles/minikube/apiserver.key.cee25041
I0330 13:52:29.863946   54684 crypto.go:68] Generating cert /home/fazil/.minikube/profiles/minikube/apiserver.crt.cee25041 with IP's: [192.168.58.2 10.96.0.1 127.0.0.1 10.0.0.1]
I0330 13:52:30.023432   54684 crypto.go:156] Writing cert to /home/fazil/.minikube/profiles/minikube/apiserver.crt.cee25041 ...
I0330 13:52:30.023472   54684 lock.go:35] WriteFile acquiring /home/fazil/.minikube/profiles/minikube/apiserver.crt.cee25041: {Name:mkd916ffd2a1146a34cb2a2d6a41ed323ca0ff2d Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0330 13:52:30.023867   54684 crypto.go:164] Writing key to /home/fazil/.minikube/profiles/minikube/apiserver.key.cee25041 ...
I0330 13:52:30.023877   54684 lock.go:35] WriteFile acquiring /home/fazil/.minikube/profiles/minikube/apiserver.key.cee25041: {Name:mke3392db2a5d7b874de8818d85867fd64eff5b2 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0330 13:52:30.023959   54684 certs.go:333] copying /home/fazil/.minikube/profiles/minikube/apiserver.crt.cee25041 -> /home/fazil/.minikube/profiles/minikube/apiserver.crt
I0330 13:52:30.024029   54684 certs.go:337] copying /home/fazil/.minikube/profiles/minikube/apiserver.key.cee25041 -> /home/fazil/.minikube/profiles/minikube/apiserver.key
I0330 13:52:30.024071   54684 certs.go:315] generating aggregator signed cert: /home/fazil/.minikube/profiles/minikube/proxy-client.key
I0330 13:52:30.024083   54684 crypto.go:68] Generating cert /home/fazil/.minikube/profiles/minikube/proxy-client.crt with IP's: []
I0330 13:52:30.139054   54684 crypto.go:156] Writing cert to /home/fazil/.minikube/profiles/minikube/proxy-client.crt ...
I0330 13:52:30.139064   54684 lock.go:35] WriteFile acquiring /home/fazil/.minikube/profiles/minikube/proxy-client.crt: {Name:mke3c64420733be13bd6d04fe10adddc5888057b Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0330 13:52:30.139170   54684 crypto.go:164] Writing key to /home/fazil/.minikube/profiles/minikube/proxy-client.key ...
I0330 13:52:30.139174   54684 lock.go:35] WriteFile acquiring /home/fazil/.minikube/profiles/minikube/proxy-client.key: {Name:mkcd734182fcc4193ac71b5b8ddb225131094447 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0330 13:52:30.139277   54684 certs.go:401] found cert: /home/fazil/.minikube/certs/home/fazil/.minikube/certs/ca-key.pem (1679 bytes)
I0330 13:52:30.139296   54684 certs.go:401] found cert: /home/fazil/.minikube/certs/home/fazil/.minikube/certs/ca.pem (1074 bytes)
I0330 13:52:30.139308   54684 certs.go:401] found cert: /home/fazil/.minikube/certs/home/fazil/.minikube/certs/cert.pem (1119 bytes)
I0330 13:52:30.139320   54684 certs.go:401] found cert: /home/fazil/.minikube/certs/home/fazil/.minikube/certs/key.pem (1679 bytes)
I0330 13:52:30.139731   54684 ssh_runner.go:362] scp /home/fazil/.minikube/profiles/minikube/apiserver.crt --> /var/lib/minikube/certs/apiserver.crt (1399 bytes)
I0330 13:52:30.173952   54684 ssh_runner.go:362] scp /home/fazil/.minikube/profiles/minikube/apiserver.key --> /var/lib/minikube/certs/apiserver.key (1675 bytes)
I0330 13:52:30.230868   54684 ssh_runner.go:362] scp /home/fazil/.minikube/profiles/minikube/proxy-client.crt --> /var/lib/minikube/certs/proxy-client.crt (1147 bytes)
I0330 13:52:30.273687   54684 ssh_runner.go:362] scp /home/fazil/.minikube/profiles/minikube/proxy-client.key --> /var/lib/minikube/certs/proxy-client.key (1679 bytes)
I0330 13:52:30.335186   54684 ssh_runner.go:362] scp /home/fazil/.minikube/ca.crt --> /var/lib/minikube/certs/ca.crt (1111 bytes)
I0330 13:52:30.394973   54684 ssh_runner.go:362] scp /home/fazil/.minikube/ca.key --> /var/lib/minikube/certs/ca.key (1679 bytes)
I0330 13:52:30.455412   54684 ssh_runner.go:362] scp /home/fazil/.minikube/proxy-client-ca.crt --> /var/lib/minikube/certs/proxy-client-ca.crt (1119 bytes)
I0330 13:52:30.510423   54684 ssh_runner.go:362] scp /home/fazil/.minikube/proxy-client-ca.key --> /var/lib/minikube/certs/proxy-client-ca.key (1679 bytes)
I0330 13:52:30.563364   54684 ssh_runner.go:362] scp /home/fazil/.minikube/ca.crt --> /usr/share/ca-certificates/minikubeCA.pem (1111 bytes)
I0330 13:52:30.597427   54684 ssh_runner.go:362] scp memory --> /var/lib/minikube/kubeconfig (738 bytes)
I0330 13:52:30.639384   54684 ssh_runner.go:195] Run: openssl version
I0330 13:52:30.654819   54684 ssh_runner.go:195] Run: sudo /bin/bash -c "test -s /usr/share/ca-certificates/minikubeCA.pem && ln -fs /usr/share/ca-certificates/minikubeCA.pem /etc/ssl/certs/minikubeCA.pem"
I0330 13:52:30.676195   54684 ssh_runner.go:195] Run: ls -la /usr/share/ca-certificates/minikubeCA.pem
I0330 13:52:30.692245   54684 certs.go:444] hashing: -rw-r--r-- 1 root root 1111 Mar 27 13:22 /usr/share/ca-certificates/minikubeCA.pem
I0330 13:52:30.692455   54684 ssh_runner.go:195] Run: openssl x509 -hash -noout -in /usr/share/ca-certificates/minikubeCA.pem
I0330 13:52:30.705314   54684 ssh_runner.go:195] Run: sudo /bin/bash -c "test -L /etc/ssl/certs/b5213941.0 || ln -fs /etc/ssl/certs/minikubeCA.pem /etc/ssl/certs/b5213941.0"
I0330 13:52:30.724430   54684 kubeadm.go:401] StartCluster: {Name:minikube KeepContext:false EmbedCerts:false MinikubeISO: KicBaseImage:gcr.io/k8s-minikube/kicbase:v0.0.37@sha256:8bf7a0e8a062bc5e2b71d28b35bfa9cc862d9220e234e86176b3785f685d8b15 Memory:2200 CPUs:2 DiskSize:20000 VMDriver: Driver:docker HyperkitVpnKitSock: HyperkitVSockPorts:[] DockerEnv:[] ContainerVolumeMounts:[] InsecureRegistry:[] RegistryMirror:[] HostOnlyCIDR:192.168.59.1/24 HypervVirtualSwitch: HypervUseExternalSwitch:false HypervExternalAdapter: KVMNetwork:default KVMQemuURI:qemu:///system KVMGPU:false KVMHidden:false KVMNUMACount:1 APIServerPort:0 DockerOpt:[] DisableDriverMounts:false NFSShare:[] NFSSharesRoot:/nfsshares UUID: NoVTXCheck:false DNSProxy:false HostDNSResolver:true HostOnlyNicType:virtio NatNicType:virtio SSHIPAddress: SSHUser:root SSHKey: SSHPort:22 KubernetesConfig:{KubernetesVersion:v1.26.1 ClusterName:minikube Namespace:default APIServerName:minikubeCA APIServerNames:[] APIServerIPs:[] DNSDomain:cluster.local ContainerRuntime:docker CRISocket: NetworkPlugin:cni FeatureGates: ServiceCIDR:10.96.0.0/12 ImageRepository: LoadBalancerStartIP: LoadBalancerEndIP: CustomIngressCert: RegistryAliases: ExtraOptions:[] ShouldLoadCachedImages:true EnableDefaultCNI:false CNI: NodeIP: NodePort:8443 NodeName:} Nodes:[{Name: IP:192.168.58.2 Port:8443 KubernetesVersion:v1.26.1 ContainerRuntime:docker ControlPlane:true Worker:true}] Addons:map[] CustomAddonImages:map[] CustomAddonRegistries:map[] VerifyComponents:map[apiserver:true system_pods:true] StartHostTimeout:6m0s ScheduledStop:<nil> ExposedPorts:[] ListenAddress: Network: Subnet: MultiNodeRequested:false ExtraDisks:0 CertExpiration:26280h0m0s Mount:false MountString:/home/fazil:/minikube-host Mount9PVersion:9p2000.L MountGID:docker MountIP: MountMSize:262144 MountOptions:[] MountPort:0 MountType:9p MountUID:docker BinaryMirror: DisableOptimizations:false DisableMetrics:false CustomQemuFirmwarePath: SocketVMnetClientPath: SocketVMnetPath: StaticIP:}
I0330 13:52:30.724913   54684 ssh_runner.go:195] Run: docker ps --filter status=paused --filter=name=k8s_.*_(kube-system)_ --format={{.ID}}
I0330 13:52:30.778363   54684 ssh_runner.go:195] Run: sudo ls /var/lib/kubelet/kubeadm-flags.env /var/lib/kubelet/config.yaml /var/lib/minikube/etcd
I0330 13:52:30.793918   54684 ssh_runner.go:195] Run: sudo cp /var/tmp/minikube/kubeadm.yaml.new /var/tmp/minikube/kubeadm.yaml
I0330 13:52:30.817850   54684 kubeadm.go:226] ignoring SystemVerification for kubeadm because of docker driver
I0330 13:52:30.818118   54684 ssh_runner.go:195] Run: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf
I0330 13:52:30.840570   54684 kubeadm.go:152] config check failed, skipping stale config cleanup: sudo ls -la /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf /etc/kubernetes/controller-manager.conf /etc/kubernetes/scheduler.conf: Process exited with status 2
stdout:

stderr:
ls: cannot access '/etc/kubernetes/admin.conf': No such file or directory
ls: cannot access '/etc/kubernetes/kubelet.conf': No such file or directory
ls: cannot access '/etc/kubernetes/controller-manager.conf': No such file or directory
ls: cannot access '/etc/kubernetes/scheduler.conf': No such file or directory
I0330 13:52:30.840716   54684 ssh_runner.go:286] Start: /bin/bash -c "sudo env PATH="/var/lib/minikube/binaries/v1.26.1:$PATH" kubeadm init --config /var/tmp/minikube/kubeadm.yaml  --ignore-preflight-errors=DirAvailable--etc-kubernetes-manifests,DirAvailable--var-lib-minikube,DirAvailable--var-lib-minikube-etcd,FileAvailable--etc-kubernetes-manifests-kube-scheduler.yaml,FileAvailable--etc-kubernetes-manifests-kube-apiserver.yaml,FileAvailable--etc-kubernetes-manifests-kube-controller-manager.yaml,FileAvailable--etc-kubernetes-manifests-etcd.yaml,Port-10250,Swap,NumCPU,Mem,SystemVerification,FileContent--proc-sys-net-bridge-bridge-nf-call-iptables"
I0330 13:52:30.925823   54684 kubeadm.go:322] [init] Using Kubernetes version: v1.26.1
I0330 13:52:30.925880   54684 kubeadm.go:322] [preflight] Running pre-flight checks
I0330 13:52:30.968358   54684 kubeadm.go:322] [preflight] The system verification failed. Printing the output from the verification:
I0330 13:52:30.968433   54684 kubeadm.go:322] [0;37mKERNEL_VERSION[0m: [0;32m6.2.6-76060206-generic[0m
I0330 13:52:30.968474   54684 kubeadm.go:322] [0;37mOS[0m: [0;32mLinux[0m
I0330 13:52:30.968512   54684 kubeadm.go:322] [0;37mCGROUPS_CPU[0m: [0;32menabled[0m
I0330 13:52:30.968541   54684 kubeadm.go:322] [0;37mCGROUPS_CPUSET[0m: [0;32menabled[0m
I0330 13:52:30.968589   54684 kubeadm.go:322] [0;37mCGROUPS_DEVICES[0m: [0;32menabled[0m
I0330 13:52:30.968622   54684 kubeadm.go:322] [0;37mCGROUPS_FREEZER[0m: [0;32menabled[0m
I0330 13:52:30.968671   54684 kubeadm.go:322] [0;37mCGROUPS_MEMORY[0m: [0;32menabled[0m
I0330 13:52:30.968732   54684 kubeadm.go:322] [0;37mCGROUPS_PIDS[0m: [0;32menabled[0m
I0330 13:52:30.968763   54684 kubeadm.go:322] [0;37mCGROUPS_HUGETLB[0m: [0;32menabled[0m
I0330 13:52:30.968805   54684 kubeadm.go:322] [0;37mCGROUPS_IO[0m: [0;32menabled[0m
I0330 13:52:31.089678   54684 kubeadm.go:322] [preflight] Pulling images required for setting up a Kubernetes cluster
I0330 13:52:31.089775   54684 kubeadm.go:322] [preflight] This might take a minute or two, depending on the speed of your internet connection
I0330 13:52:31.089838   54684 kubeadm.go:322] [preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
I0330 13:52:31.330408   54684 kubeadm.go:322] [certs] Using certificateDir folder "/var/lib/minikube/certs"
I0330 13:52:31.333903   54684 out.go:204]     ▪ Generating certificates and keys ...
I0330 13:52:31.334063   54684 kubeadm.go:322] [certs] Using existing ca certificate authority
I0330 13:52:31.334127   54684 kubeadm.go:322] [certs] Using existing apiserver certificate and key on disk
I0330 13:52:31.704870   54684 kubeadm.go:322] [certs] Generating "apiserver-kubelet-client" certificate and key
I0330 13:52:31.830091   54684 kubeadm.go:322] [certs] Generating "front-proxy-ca" certificate and key
I0330 13:52:32.011157   54684 kubeadm.go:322] [certs] Generating "front-proxy-client" certificate and key
I0330 13:52:32.105859   54684 kubeadm.go:322] [certs] Generating "etcd/ca" certificate and key
I0330 13:52:32.217982   54684 kubeadm.go:322] [certs] Generating "etcd/server" certificate and key
I0330 13:52:32.218082   54684 kubeadm.go:322] [certs] etcd/server serving cert is signed for DNS names [localhost minikube] and IPs [192.168.58.2 127.0.0.1 ::1]
I0330 13:52:32.372413   54684 kubeadm.go:322] [certs] Generating "etcd/peer" certificate and key
I0330 13:52:32.372554   54684 kubeadm.go:322] [certs] etcd/peer serving cert is signed for DNS names [localhost minikube] and IPs [192.168.58.2 127.0.0.1 ::1]
I0330 13:52:32.447712   54684 kubeadm.go:322] [certs] Generating "etcd/healthcheck-client" certificate and key
I0330 13:52:32.528682   54684 kubeadm.go:322] [certs] Generating "apiserver-etcd-client" certificate and key
I0330 13:52:33.152942   54684 kubeadm.go:322] [certs] Generating "sa" key and public key
I0330 13:52:33.153026   54684 kubeadm.go:322] [kubeconfig] Using kubeconfig folder "/etc/kubernetes"
I0330 13:52:33.240220   54684 kubeadm.go:322] [kubeconfig] Writing "admin.conf" kubeconfig file
I0330 13:52:33.396494   54684 kubeadm.go:322] [kubeconfig] Writing "kubelet.conf" kubeconfig file
I0330 13:52:33.493351   54684 kubeadm.go:322] [kubeconfig] Writing "controller-manager.conf" kubeconfig file
I0330 13:52:33.627086   54684 kubeadm.go:322] [kubeconfig] Writing "scheduler.conf" kubeconfig file
I0330 13:52:33.641309   54684 kubeadm.go:322] [kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
I0330 13:52:33.642480   54684 kubeadm.go:322] [kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
I0330 13:52:33.642558   54684 kubeadm.go:322] [kubelet-start] Starting the kubelet
I0330 13:52:33.839860   54684 kubeadm.go:322] [control-plane] Using manifest folder "/etc/kubernetes/manifests"
I0330 13:52:33.844652   54684 out.go:204]     ▪ Booting up control plane ...
I0330 13:52:33.844881   54684 kubeadm.go:322] [control-plane] Creating static Pod manifest for "kube-apiserver"
I0330 13:52:33.847741   54684 kubeadm.go:322] [control-plane] Creating static Pod manifest for "kube-controller-manager"
I0330 13:52:33.852001   54684 kubeadm.go:322] [control-plane] Creating static Pod manifest for "kube-scheduler"
I0330 13:52:33.861316   54684 kubeadm.go:322] [etcd] Creating static Pod manifest for local etcd in "/etc/kubernetes/manifests"
I0330 13:52:33.866973   54684 kubeadm.go:322] [wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory "/etc/kubernetes/manifests". This can take up to 4m0s
I0330 13:52:46.869479   54684 kubeadm.go:322] [apiclient] All control plane components are healthy after 13.003423 seconds
I0330 13:52:46.869558   54684 kubeadm.go:322] [upload-config] Storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace
I0330 13:52:46.892510   54684 kubeadm.go:322] [kubelet] Creating a ConfigMap "kubelet-config" in namespace kube-system with the configuration for the kubelets in the cluster
I0330 13:52:47.931678   54684 kubeadm.go:322] [upload-certs] Skipping phase. Please see --upload-certs
I0330 13:52:47.931792   54684 kubeadm.go:322] [mark-control-plane] Marking the node minikube as control-plane by adding the labels: [node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers]
I0330 13:52:48.444998   54684 kubeadm.go:322] [bootstrap-token] Using token: v3lymt.rx7i4g6wmhtes2wm
I0330 13:52:48.446521   54684 out.go:204]     ▪ Configuring RBAC rules ...
I0330 13:52:48.446818   54684 kubeadm.go:322] [bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
I0330 13:52:48.451579   54684 kubeadm.go:322] [bootstrap-token] Configured RBAC rules to allow Node Bootstrap tokens to get nodes
I0330 13:52:48.459592   54684 kubeadm.go:322] [bootstrap-token] Configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
I0330 13:52:48.462908   54684 kubeadm.go:322] [bootstrap-token] Configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
I0330 13:52:48.468421   54684 kubeadm.go:322] [bootstrap-token] Configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
I0330 13:52:48.472505   54684 kubeadm.go:322] [bootstrap-token] Creating the "cluster-info" ConfigMap in the "kube-public" namespace
I0330 13:52:48.494422   54684 kubeadm.go:322] [kubelet-finalize] Updating "/etc/kubernetes/kubelet.conf" to point to a rotatable kubelet client certificate and key
I0330 13:52:48.873799   54684 kubeadm.go:322] [addons] Applied essential addon: CoreDNS
I0330 13:52:48.925471   54684 kubeadm.go:322] [addons] Applied essential addon: kube-proxy
I0330 13:52:48.928663   54684 kubeadm.go:322] 
I0330 13:52:48.928745   54684 kubeadm.go:322] Your Kubernetes control-plane has initialized successfully!
I0330 13:52:48.928751   54684 kubeadm.go:322] 
I0330 13:52:48.928800   54684 kubeadm.go:322] To start using your cluster, you need to run the following as a regular user:
I0330 13:52:48.928802   54684 kubeadm.go:322] 
I0330 13:52:48.928818   54684 kubeadm.go:322]   mkdir -p $HOME/.kube
I0330 13:52:48.928857   54684 kubeadm.go:322]   sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
I0330 13:52:48.929400   54684 kubeadm.go:322]   sudo chown $(id -u):$(id -g) $HOME/.kube/config
I0330 13:52:48.929409   54684 kubeadm.go:322] 
I0330 13:52:48.929453   54684 kubeadm.go:322] Alternatively, if you are the root user, you can run:
I0330 13:52:48.929457   54684 kubeadm.go:322] 
I0330 13:52:48.929489   54684 kubeadm.go:322]   export KUBECONFIG=/etc/kubernetes/admin.conf
I0330 13:52:48.929492   54684 kubeadm.go:322] 
I0330 13:52:48.929528   54684 kubeadm.go:322] You should now deploy a pod network to the cluster.
I0330 13:52:48.929590   54684 kubeadm.go:322] Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
I0330 13:52:48.929633   54684 kubeadm.go:322]   https://kubernetes.io/docs/concepts/cluster-administration/addons/
I0330 13:52:48.929640   54684 kubeadm.go:322] 
I0330 13:52:48.929695   54684 kubeadm.go:322] You can now join any number of control-plane nodes by copying certificate authorities
I0330 13:52:48.929752   54684 kubeadm.go:322] and service account keys on each node and then running the following as root:
I0330 13:52:48.929754   54684 kubeadm.go:322] 
I0330 13:52:48.929813   54684 kubeadm.go:322]   kubeadm join control-plane.minikube.internal:8443 --token v3lymt.rx7i4g6wmhtes2wm \
I0330 13:52:48.929880   54684 kubeadm.go:322] 	--discovery-token-ca-cert-hash sha256:977f5c91fc914838a7ac964d0dc17b2b56123e3c8510ab63e39dc62af19e129b \
I0330 13:52:48.929900   54684 kubeadm.go:322] 	--control-plane 
I0330 13:52:48.929902   54684 kubeadm.go:322] 
I0330 13:52:48.929960   54684 kubeadm.go:322] Then you can join any number of worker nodes by running the following on each as root:
I0330 13:52:48.929963   54684 kubeadm.go:322] 
I0330 13:52:48.930018   54684 kubeadm.go:322] kubeadm join control-plane.minikube.internal:8443 --token v3lymt.rx7i4g6wmhtes2wm \
I0330 13:52:48.930110   54684 kubeadm.go:322] 	--discovery-token-ca-cert-hash sha256:977f5c91fc914838a7ac964d0dc17b2b56123e3c8510ab63e39dc62af19e129b 
I0330 13:52:48.937020   54684 kubeadm.go:322] W0330 08:22:30.915833    1264 initconfiguration.go:119] Usage of CRI endpoints without URL scheme is deprecated and can cause kubelet errors in the future. Automatically prepending scheme "unix" to the "criSocket" with value "/var/run/cri-dockerd.sock". Please update your configuration!
I0330 13:52:48.937117   54684 kubeadm.go:322] 	[WARNING Swap]: swap is enabled; production deployments should disable swap unless testing the NodeSwap feature gate of the kubelet
I0330 13:52:48.937285   54684 kubeadm.go:322] 	[WARNING SystemVerification]: failed to parse kernel config: unable to load kernel module: "configs", output: "modprobe: FATAL: Module configs not found in directory /lib/modules/6.2.6-76060206-generic\n", err: exit status 1
I0330 13:52:48.937360   54684 kubeadm.go:322] 	[WARNING Service-Kubelet]: kubelet service is not enabled, please run 'systemctl enable kubelet.service'
I0330 13:52:48.937393   54684 cni.go:84] Creating CNI manager for ""
I0330 13:52:48.937413   54684 cni.go:157] "docker" driver + "docker" container runtime found on kubernetes v1.24+, recommending bridge
I0330 13:52:48.939806   54684 out.go:177] 🔗  Configuring bridge CNI (Container Networking Interface) ...
I0330 13:52:48.941584   54684 ssh_runner.go:195] Run: sudo mkdir -p /etc/cni/net.d
I0330 13:52:48.957589   54684 ssh_runner.go:362] scp memory --> /etc/cni/net.d/1-k8s.conflist (457 bytes)
I0330 13:52:49.006653   54684 ssh_runner.go:195] Run: /bin/bash -c "cat /proc/$(pgrep kube-apiserver)/oom_adj"
I0330 13:52:49.006999   54684 ssh_runner.go:195] Run: sudo /var/lib/minikube/binaries/v1.26.1/kubectl create clusterrolebinding minikube-rbac --clusterrole=cluster-admin --serviceaccount=kube-system:default --kubeconfig=/var/lib/minikube/kubeconfig
I0330 13:52:49.007061   54684 ssh_runner.go:195] Run: sudo /var/lib/minikube/binaries/v1.26.1/kubectl label nodes minikube.k8s.io/version=v1.29.0 minikube.k8s.io/commit=ddac20b4b34a9c8c857fc602203b6ba2679794d3 minikube.k8s.io/name=minikube minikube.k8s.io/updated_at=2023_03_30T13_52_49_0700 minikube.k8s.io/primary=true --all --overwrite --kubeconfig=/var/lib/minikube/kubeconfig
I0330 13:52:49.376572   54684 ops.go:34] apiserver oom_adj: -16
I0330 13:52:49.376583   54684 kubeadm.go:1073] duration metric: took 369.690478ms to wait for elevateKubeSystemPrivileges.
I0330 13:52:49.376592   54684 kubeadm.go:403] StartCluster complete in 18.652228031s
I0330 13:52:49.376609   54684 settings.go:142] acquiring lock: {Name:mkf2df3298ec3f9c6104618de8a76ae0da70d0ea Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0330 13:52:49.376867   54684 settings.go:150] Updating kubeconfig:  /home/fazil/.kube/config
I0330 13:52:49.377908   54684 lock.go:35] WriteFile acquiring /home/fazil/.kube/config: {Name:mk9b32011035b467c9caa77a5f1d96a1604682d6 Clock:{} Delay:500ms Timeout:1m0s Cancel:<nil>}
I0330 13:52:49.378112   54684 ssh_runner.go:195] Run: /bin/bash -c "sudo /var/lib/minikube/binaries/v1.26.1/kubectl --kubeconfig=/var/lib/minikube/kubeconfig -n kube-system get configmap coredns -o yaml"
I0330 13:52:49.378254   54684 addons.go:489] enable addons start: toEnable=map[ambassador:false auto-pause:false cloud-spanner:false csi-hostpath-driver:false dashboard:false default-storageclass:true efk:false freshpod:false gcp-auth:false gvisor:false headlamp:false helm-tiller:false inaccel:false ingress:false ingress-dns:false istio:false istio-provisioner:false kong:false kubevirt:false logviewer:false metallb:false metrics-server:false nvidia-driver-installer:false nvidia-gpu-device-plugin:false olm:false pod-security-policy:false portainer:false registry:false registry-aliases:false registry-creds:false storage-provisioner:true storage-provisioner-gluster:false volumesnapshots:false]
I0330 13:52:49.378321   54684 addons.go:65] Setting storage-provisioner=true in profile "minikube"
I0330 13:52:49.378325   54684 addons.go:65] Setting default-storageclass=true in profile "minikube"
I0330 13:52:49.378334   54684 addons.go:227] Setting addon storage-provisioner=true in "minikube"
I0330 13:52:49.378337   54684 addons_storage_classes.go:33] enableOrDisableStorageClasses default-storageclass=true on "minikube"
W0330 13:52:49.378339   54684 addons.go:236] addon storage-provisioner should already be in state true
I0330 13:52:49.378359   54684 config.go:180] Loaded profile config "minikube": Driver=docker, ContainerRuntime=docker, KubernetesVersion=v1.26.1
I0330 13:52:49.378383   54684 host.go:66] Checking if "minikube" exists ...
I0330 13:52:49.378588   54684 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
I0330 13:52:49.378691   54684 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
I0330 13:52:49.516767   54684 ssh_runner.go:195] Run: /bin/bash -c "sudo /var/lib/minikube/binaries/v1.26.1/kubectl --kubeconfig=/var/lib/minikube/kubeconfig -n kube-system get configmap coredns -o yaml | sed -e '/^        forward . \/etc\/resolv.conf.*/i \        hosts {\n           192.168.58.1 host.minikube.internal\n           fallthrough\n        }' -e '/^        errors *$/i \        log' | sudo /var/lib/minikube/binaries/v1.26.1/kubectl --kubeconfig=/var/lib/minikube/kubeconfig replace -f -"
I0330 13:52:49.537618   54684 addons.go:227] Setting addon default-storageclass=true in "minikube"
W0330 13:52:49.537633   54684 addons.go:236] addon default-storageclass should already be in state true
I0330 13:52:49.537651   54684 host.go:66] Checking if "minikube" exists ...
I0330 13:52:49.537936   54684 cli_runner.go:164] Run: docker container inspect minikube --format={{.State.Status}}
I0330 13:52:49.543843   54684 out.go:177]     ▪ Using image gcr.io/k8s-minikube/storage-provisioner:v5
I0330 13:52:49.545361   54684 addons.go:419] installing /etc/kubernetes/addons/storage-provisioner.yaml
I0330 13:52:49.545377   54684 ssh_runner.go:362] scp memory --> /etc/kubernetes/addons/storage-provisioner.yaml (2676 bytes)
I0330 13:52:49.545438   54684 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0330 13:52:49.684046   54684 addons.go:419] installing /etc/kubernetes/addons/storageclass.yaml
I0330 13:52:49.684085   54684 ssh_runner.go:362] scp memory --> /etc/kubernetes/addons/storageclass.yaml (271 bytes)
I0330 13:52:49.684334   54684 cli_runner.go:164] Run: docker container inspect -f "'{{(index (index .NetworkSettings.Ports "22/tcp") 0).HostPort}}'" minikube
I0330 13:52:49.696830   54684 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32777 SSHKeyPath:/home/fazil/.minikube/machines/minikube/id_rsa Username:docker}
I0330 13:52:49.786612   54684 sshutil.go:53] new ssh client: &{IP:127.0.0.1 Port:32777 SSHKeyPath:/home/fazil/.minikube/machines/minikube/id_rsa Username:docker}
I0330 13:52:49.809851   54684 ssh_runner.go:195] Run: sudo KUBECONFIG=/var/lib/minikube/kubeconfig /var/lib/minikube/binaries/v1.26.1/kubectl apply -f /etc/kubernetes/addons/storage-provisioner.yaml
I0330 13:52:49.906684   54684 kapi.go:248] "coredns" deployment in "kube-system" namespace and "minikube" context rescaled to 1 replicas
I0330 13:52:49.906774   54684 start.go:223] Will wait 6m0s for node &{Name: IP:192.168.58.2 Port:8443 KubernetesVersion:v1.26.1 ContainerRuntime:docker ControlPlane:true Worker:true}
I0330 13:52:49.908759   54684 out.go:177] 🔎  Verifying Kubernetes components...
I0330 13:52:49.910576   54684 ssh_runner.go:195] Run: sudo systemctl is-active --quiet service kubelet
I0330 13:52:49.911892   54684 ssh_runner.go:195] Run: sudo KUBECONFIG=/var/lib/minikube/kubeconfig /var/lib/minikube/binaries/v1.26.1/kubectl apply -f /etc/kubernetes/addons/storageclass.yaml
I0330 13:52:50.611212   54684 ssh_runner.go:235] Completed: /bin/bash -c "sudo /var/lib/minikube/binaries/v1.26.1/kubectl --kubeconfig=/var/lib/minikube/kubeconfig -n kube-system get configmap coredns -o yaml | sed -e '/^        forward . \/etc\/resolv.conf.*/i \        hosts {\n           192.168.58.1 host.minikube.internal\n           fallthrough\n        }' -e '/^        errors *$/i \        log' | sudo /var/lib/minikube/binaries/v1.26.1/kubectl --kubeconfig=/var/lib/minikube/kubeconfig replace -f -": (1.094404837s)
I0330 13:52:50.611231   54684 start.go:919] {"host.minikube.internal": 192.168.58.1} host record injected into CoreDNS's ConfigMap
I0330 13:52:50.612945   54684 out.go:177] 🌟  Enabled addons: storage-provisioner, default-storageclass
I0330 13:52:50.614599   54684 addons.go:492] enable addons completed in 1.236319743s: enabled=[storage-provisioner default-storageclass]
I0330 13:52:50.612083   54684 api_server.go:51] waiting for apiserver process to appear ...
I0330 13:52:50.614761   54684 ssh_runner.go:195] Run: sudo pgrep -xnf kube-apiserver.*minikube.*
I0330 13:52:50.628907   54684 api_server.go:71] duration metric: took 722.063698ms to wait for apiserver process to appear ...
I0330 13:52:50.628923   54684 api_server.go:87] waiting for apiserver healthz status ...
I0330 13:52:50.628932   54684 api_server.go:252] Checking apiserver healthz at https://192.168.58.2:8443/healthz ...
I0330 13:52:50.634957   54684 api_server.go:278] https://192.168.58.2:8443/healthz returned 200:
ok
I0330 13:52:50.635651   54684 api_server.go:140] control plane version: v1.26.1
I0330 13:52:50.635659   54684 api_server.go:130] duration metric: took 6.732255ms to wait for apiserver health ...
I0330 13:52:50.635663   54684 system_pods.go:43] waiting for kube-system pods to appear ...
I0330 13:52:50.642819   54684 system_pods.go:59] 5 kube-system pods found
I0330 13:52:50.642920   54684 system_pods.go:61] "etcd-minikube" [bd5e957e-2abf-434b-bb36-19f44e333530] Pending
I0330 13:52:50.642934   54684 system_pods.go:61] "kube-apiserver-minikube" [785c15a5-1b25-4a00-a4be-09ed23ac393d] Pending
I0330 13:52:50.642944   54684 system_pods.go:61] "kube-controller-manager-minikube" [ef408cfa-772d-4842-bc55-ac19a6d8d08d] Pending
I0330 13:52:50.642951   54684 system_pods.go:61] "kube-scheduler-minikube" [bd9f1d9a-59ce-4dad-8a07-836f6a792af8] Pending
I0330 13:52:50.642967   54684 system_pods.go:61] "storage-provisioner" [44c3ad7f-abfb-46a4-89d8-4c76bc61ca41] Pending: PodScheduled:Unschedulable (0/1 nodes are available: 1 node(s) had untolerated taint {node.kubernetes.io/not-ready: }. preemption: 0/1 nodes are available: 1 Preemption is not helpful for scheduling..)
I0330 13:52:50.642986   54684 system_pods.go:74] duration metric: took 7.313848ms to wait for pod list to return data ...
I0330 13:52:50.643017   54684 kubeadm.go:578] duration metric: took 736.177253ms to wait for : map[apiserver:true system_pods:true] ...
I0330 13:52:50.643069   54684 node_conditions.go:102] verifying NodePressure condition ...
I0330 13:52:50.648819   54684 node_conditions.go:122] node storage ephemeral capacity is 108926448Ki
I0330 13:52:50.648866   54684 node_conditions.go:123] node cpu capacity is 8
I0330 13:52:50.648907   54684 node_conditions.go:105] duration metric: took 5.826423ms to run NodePressure ...
I0330 13:52:50.648933   54684 start.go:228] waiting for startup goroutines ...
I0330 13:52:50.648941   54684 start.go:233] waiting for cluster config update ...
I0330 13:52:50.648965   54684 start.go:240] writing updated cluster config ...
I0330 13:52:50.649877   54684 ssh_runner.go:195] Run: rm -f paused
I0330 13:52:50.735772   54684 start.go:555] kubectl: 1.26.3, cluster: 1.26.1 (minor skew: 0)
I0330 13:52:50.737518   54684 out.go:177] 🏄  Done! kubectl is now configured to use "minikube" cluster and "default" namespace by default

* 
